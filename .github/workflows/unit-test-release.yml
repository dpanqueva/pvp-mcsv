name: CI/CD Workflow

on:
  pull_request:
    branches:
      - develop
      - master
    types: [opened, synchronize]

jobs:
  test-and-coverage:
    if: github.base_ref == 'develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Run Tests with JaCoCo
        run: |
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            mvn clean test jacoco:report -Djacoco.includes=** -Djacoco.excludes=com/bcnc/inditex/pvp/mcsv/infrastructure/config/**
        env:
            DB_USERNAME: ${{ secrets.DB_USERNAME }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Verify Jacoco Report Exists
        run: |
          if [ ! -f target/site/jacoco/jacoco.xml ]; then
            echo "Error: jacoco.xml no encontrado. Aseg√∫rate de que las pruebas se ejecuten correctamente."
            exit 1
          fi

      - name: Extract Coverage Percentage
        run: |
          COVERED=$(xmllint --xpath "string(//report/counter[@type='LINE']/@covered)" target/site/jacoco/jacoco.xml)
          MISSED=$(xmllint --xpath "string(//report/counter[@type='LINE']/@missed)" target/site/jacoco/jacoco.xml)

          if [[ -z "$COVERED" || -z "$MISSED" ]]; then
            echo "Error: No se pudieron obtener valores de cobertura"
            exit 1
          fi

          TOTAL=$((COVERED + MISSED))
          if [[ "$TOTAL" -eq 0 ]]; then
            echo "Error: Total de l√≠neas cubiertas y perdidas es 0"
            exit 1
          fi

          PERCENTAGE=$((COVERED * 100 / TOTAL))
          echo "COVERAGE_PERCENTAGE=$PERCENTAGE" >> $GITHUB_ENV
          echo "üìä **Cobertura de c√≥digo:** $PERCENTAGE%"
          

      - name: Post Coverage Comment
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            üìä **Cobertura de c√≥digo:** `${{ env.COVERAGE_PERCENTAGE }}%`
            ${{ env.COVERAGE_PERCENTAGE >= 80 && '‚úÖ Cumple con el m√≠nimo requerido.' || '‚ùå Insuficiente, se requiere al menos 80%.' }}
          GITHUB_TOKEN: ${{ secrets.GB_TOKEN }}

      - name: Fail if Coverage is Below 80%
        if: ${{ env.COVERAGE_PERCENTAGE < 80 }}
        run: exit 1

  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: |
          set -e
          mvn clean package -DskipTests
          # Verificar que el archivo JAR se haya generado en ./target/
          ls -al ./target

      - name: Extract Version
        id: version
        run: |
          set -e
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Extracted version: ${VERSION}"

      - name: Login to DockerHub
        run: |
          set -e
          echo "Logging into DockerHub as ${{ secrets.DOCKER_USERNAME }}"
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker
        uses: docker/build-push-action@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          repository: ${{ github.repository }}
          tag_with_ref: true
          tag_with_sha: true
          tags: ${{ github.sha }}

      - name: Create Git Tag
        run: |
          set -e
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ env.VERSION }}" -m "Release ${{ env.VERSION }}"
          
          # Usa el token de acceso personal (PAT) para hacer el push
          git push https://x-access-token:${{ secrets.GB_TOKEN }}@github.com/{{ secrets.GB_USERNAME }}/${{ github.repository }} "v${{ env.VERSION }}"

      - name: Update POM Version
        run: |
          set -e
          CURRENT_VERSION="${{ env.VERSION }}"
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
          NEXT_VERSION="$((MAJOR+1)).0.0-SNAPSHOT"
          mvn versions:set -DnewVersion=${NEXT_VERSION} -DgenerateBackup=false
          git commit -am "Update version to ${NEXT_VERSION}"
          git push origin HEAD